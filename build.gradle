plugins {
    id 'fabric-loom' version "${loomVersion}-SNAPSHOT"
}

def modId = project.modName.toLowerCase()
version = "mc${minecraftVersion}+${modVersion}"
group = "com." + project.author

base {
    archivesName = modId
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings "net.fabricmc:yarn:${minecraftVersion}+build.${mappingsBuild}:v2"
    modImplementation "net.fabricmc:fabric-loader:${minLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${apiVersion}+${minecraftVersion}"
}

processResources {
    def propertyMap = [
            'modId'           : modId,
            'modVersion'      : modVersion,
            'modName'         : modName,
            'author'          : author,
            'minJavaVersion'  : minJavaVersion,
            'minecraftVersion': minecraftVersion,
            'minLoaderVersion': minLoaderVersion
    ]
    inputs.properties(propertyMap)
    filesMatching("fabric.mod.json") {
        expand(propertyMap)
    }
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release.set(minJavaVersion.toInteger())
}

tasks.register('generateBuildConfig', DefaultTask) {
    doLast {
        def configPath = "$projectDir/src/main/java/com/diskree/achievetodo/BuildConfig.java"
        def templatePath = "$projectDir/gradle/BuildConfig.java.txt"

        file(configPath).text = file(templatePath).text
                .replace('${modName}', modName)
                .replace('${isDebug}', isDebug)
    }
}

tasks.register('buildRelease', GradleBuild) {
    startParameter.projectProperties = ['isDebug': 'false']

    //noinspection GroovyAssignabilityCheck
    tasks = ['build']
}

java {
    sourceCompatibility = targetCompatibility = minJavaVersion.toInteger()
}

jar {
    from('LICENSE') {
        rename { "${it}_${modId}" }
    }
    compileJava.dependsOn(generateBuildConfig)
}

loom {
    accessWidenerPath.set(file("src/main/resources/achievetodo.accesswidener"))

    runs {
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${modId}"

            runDir "build/datagen"
        }
    }
}
