plugins {
    alias libs.plugins.loom
}

def modId = project.mod_name.toLowerCase()

base.archivesName = modId
version = "$project.version+${libs.versions.minecraft.get()}"
group = "com." + project.author

repositories {
    mavenCentral()
}

dependencies {
    minecraft libs.minecraft

    mappings variantOf(libs.mappings) { classifier 'v2' }

    modImplementation libs.loader
    modImplementation libs.api
}

processResources {
    inputs.property 'version', version

    filesMatching('fabric.mod.json') {
        expand 'modId': modId,
                'version': version,
                'modName': mod_name,
                'author': author
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release.set(17)
}

tasks.register('generateBuildConfig', DefaultTask) {
    doLast {
        def configPath = "$projectDir/src/main/java/com/diskree/achievetodo/BuildConfig.java"
        def templatePath = "$projectDir/gradle/BuildConfig.java.txt"
        def isDebug = project.properties['debug'] ?: 'false'

        file(configPath).text = file(templatePath).text
                .replace('${modName}', mod_name.toString())
                .replace('${isDebug}', isDebug.toString())
    }
}

tasks.register('buildRelease', GradleBuild) {
    //noinspection GroovyAssignabilityCheck
    tasks = ['build']
    startParameter.projectProperties = ['debug': 'false']
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
}

jar {
    from('LICENSE') {
        rename { "${it}_${modId}" }
    }
    compileJava.dependsOn(generateBuildConfig)
}

loom {
    accessWidenerPath.set(file("src/main/resources/achievetodo.accesswidener"))
}
